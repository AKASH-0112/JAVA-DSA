import java.util.Stack;

//  valid parenthesisi
//  balanced brackest
//  balanced parenthesis
//  parenthesisi cheker
// O(n) timme
// O(n) space
public class _10valid_parenthesis {
    
    public static boolean isValid(String s){
        if(s.charAt(0)== ')' ||s.charAt(0)== ']' ||s.charAt(0)== '}' ){
            return false;
        }
        Stack<Character> st = new Stack<>();
        
        int i = 0;
        
        while(i <s.length()){
            
            char c =s.charAt(i);
            if(c=='(' || c=='[' || c=='{' ){
                
                st.push(c);
                
            }
            else if(c==')'){
                if(!st.empty() && st.peek()=='('){
                    st.pop();
                }
                else{
                    return false;
                }
            
            }
             else if(c==']'){
                if(!st.empty() &&st.peek()=='['){
                    st.pop();
                } else{
                    return false;
                }
            
            }
        
             else if(c=='}'){
                if(!st.empty() &&st.peek()=='{'){
                    st.pop();
                } else{
                    return false;
                }
            
            }
            i++;
        }
        return st.empty();
        
    }
    public static void main(String[] args) {
        

        // String  s = "(){}[]";
        // String  s = "]";
        // String  s = "]{}";
        // String  s = "{}]";
        String  s = "[]]}([)){)]({]{](])(({()]({]({(])]]])((}{{[]{}}}){[}{[{{][({({]{])]]][}))}{}][[(][])]{)(]{}(]))][({({}[{[)})[(]([([](((]})}}([(}({(()}[[][[[]]{)(]}][[){{}}[[[{{)}[[]((](])(}]([[{})}{){](}(]{[[]{{){)})[{))(}}[{})}]}[[)]))}{)]()()}{)]}))}{}{{]}{){[(}]))(}(}}()([[)[{}]}]{){[})[]]{([]}[)]]({{]}{{[]]{[()](}}[}])()[}}{)](}[{)}}[[[[](())){[[]{}(}([)]}[})[[(}((}({])]{{[)((]])]](([]((]])][{]]}(](]}}{(){))[(]{(]}])([][{})(]{[))[}[}(){}}{(([}({][}}(]()]))}[}(])}}}[{]){[){{]{)]{((}{}([}{][}()}([{{(](}]({([[()[(]{{]]}){{{([]{{()][[}{}](}){}){}[]{([)[{(}}({[)([(({(()[[[{})))))]]{]({{))]{(](}[)[{({((((({}{}{}{]](]][}{[[{[({[}}]{{}[){)][{({[(]())]([]}}[{{([){}][(}})[(}][[}}]}([([}]{()[)[[[]{][([)}{)}[){{){[](]{}](](}(]{][[()({[}{)]({{}}{][{)[{}{[[)}[]){[[)[)(((}[}}(])(({])}[)[))])()){)})]][[(}{){{[){[})(})(){{[]}[]])][[{{{{[{]((}}(]][{]((][)})][}})]}}){}[)((]}[]]](}(]}{)]}][][[{(}[(([{}))[}]}[))}[{][{[[[]({)]{})[]{(})[})[[))}][}(}{({}]]{][){))([({{)][}[[}[[[][[)([]}(}([{}(})[}{](}[[](){]{){[(){]}})(](}[()((}{}]]}[((}{]})[[[{})(][}(}(){{[[[}}}]}{)[))]}))][}({){)[){}({())[]](}{[({])]]{]{({})}])[)(}){([){{[][}(])()(](())]}[){)({[]]})[]]][))]{[}][}({]}{[]{[({}]]}]({{(}}}[[){]]{[{{])}})}[}])])}{())(()(([]}{({)]]][{{)]])}})){(){)(({(}(]}}(}[[)([(){)){{}{(][()}{]{{{(])}}})[[{{({]}}(]{})((]})}](([]]}}[]}}[[](]]()[])])()}[}[[{}[{])]]([][[((()]))]{((]{}))})([})({){[}[)[}{)[{(]}]}{}()]]}[[{]]}(]})](]]{}{(}[}}]({[][){[})]](}{])[)[}]}){)(]}}][}])]}[{){{)({)]((}[]()(]}[(({([{{{]}]]{[{))}))]{[[][[{[})([}([]()[)}))[(){({(({{{)}]}[]}[])[](()})[{[]{])]{[[{}[(]}](){[)(}((}()]][[[]](})[))}[{))}[}{}}))]{())(]}{{[(}{){)](((})[[{)])}({){{]{]}{))}(([{}))([{([))[[){(}{}(})]][}(](]((({{{))))(]]()}{{[({[)[}(}}(]{(]]({)]{}))({]]}[]){){{[}[[}){)([[})(})})}(}([[(}{)){()}]})[}{()]]{(]])])}[](}){[]}}{{(){{){([{[{[]}{}([{[{)[[{]]{}]]({][]{{{]}(]{([]]})()]}]}}]({{}}[}))]}}()}{][((})})])]](]){])]]}}(}[[[])){{})])[]}){]](}[({{][()[[{}([})]]()}{{}[{{]}])[])([])[()}}){}(}[}]))][})))[})])](}{]]((}}{{[[]][(]{}{]{(){]{)[]])}})[})))(]}}])]](}[)(){{(}})})]}}[))}]]}][}[{)]]})}({)]}][[{[[[]}[}((]])]}(({({)][)[(({})((])){{{){{{{){({})}({{[})[[]}}])}[{[((][)()}(([}({}(]][}}][{[()}[[}])[}}[]}{(({{)}][}]}]{{((][)(}(}}{)))}}{)}](){[}({{{[]][)]({[})))]])}[}{]{{])[(])[)(}))((}[{[}}))}}]{){([)((}]]}[[{([]())}[}][[[()}}({}[])}}{(";

        System.out.println(isValid(s));

            
            
        
    }
}
//  brackes must be in ordere  , []   ,not ] [
//  ([{}]) valid
//  ]  is not valid    , handle separtely as no condtion will match  , so check at first only , if s.charAt(0)= ] ) } , the entire string will never valid
//  {}[  not valid   , return will be false , as [ will be in stack
//  {}]  not valid   
// {}]  in this case ,after pop() nothing will be in stack so we need to check !st.empty each time , else return false



